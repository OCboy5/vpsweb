#!/bin/bash
# VPSWeb Development Environment Setup Script v0.3.1
#
# Automated setup script for VPSWeb development environment
# Installs dependencies, configures environment, and initializes database

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LOG_FILE="${PROJECT_ROOT}/setup.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Logging
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOG_FILE"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" | tee -a "$LOG_FILE" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1" | tee -a "$LOG_FILE"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1" | tee -a "$LOG_FILE"
}

info() {
    echo -e "${CYAN}[INFO]${NC} $1" | tee -a "$LOG_FILE"
}

step() {
    echo -e "${PURPLE}[STEP]${NC} $1" | tee -a "$LOG_FILE"
}

# System requirements check
check_requirements() {
    step "Checking system requirements..."

    # Check Python version
    if command -v python3 &> /dev/null; then
        PYTHON_VERSION=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
        info "Python version: $PYTHON_VERSION"

        # Use proper version comparison (major.minor)
        MAJOR=$(echo $PYTHON_VERSION | cut -d. -f1)
        MINOR=$(echo $PYTHON_VERSION | cut -d. -f2)

        if [[ $MAJOR -gt 3 ]] || [[ $MAJOR -eq 3 && $MINOR -ge 8 ]]; then
            success "Python $PYTHON_VERSION meets requirements (>= 3.8)"
        else
            error "Python $PYTHON_VERSION is too old. Requires Python 3.8 or higher"
            exit 1
        fi
    else
        error "Python 3 is not installed or not in PATH"
        exit 1
    fi

    # Check Poetry
    if command -v poetry &> /dev/null; then
        POETRY_VERSION=$(poetry --version)
        success "Poetry is installed: $POETRY_VERSION"
    else
        warning "Poetry is not installed. Installing now..."
        install_poetry
    fi

    # Check Git
    if command -v git &> /dev/null; then
        GIT_VERSION=$(git --version)
        success "Git is installed: $GIT_VERSION"
    else
        error "Git is not installed. Please install Git first"
        exit 1
    fi

    # Check SQLite
    if command -v sqlite3 &> /dev/null; then
        success "SQLite3 is available"
    else
        warning "SQLite3 is not installed. Some features may not work"
    fi
}

# Install Poetry
install_poetry() {
    step "Installing Poetry..."

    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        if command -v brew &> /dev/null; then
            brew install poetry
        else
            curl -sSL https://install.python-poetry.org | python3 -
        fi
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        curl -sSL https://install.python-poetry.org | python3 -
    else
        error "Unsupported OS for automatic Poetry installation"
        info "Please install Poetry manually: https://python-poetry.org/docs/#installation"
        exit 1
    fi

    # Add Poetry to PATH
    export PATH="$HOME/.local/bin:$PATH"
    echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc
    echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.zshrc 2>/dev/null || true

    success "Poetry installed successfully"
}

# Setup Python environment
setup_python_env() {
    step "Setting up Python environment..."

    cd "$PROJECT_ROOT"

    # Configure Poetry
    poetry config virtualenvs.in-project true
    poetry config virtualenvs.create true
    info "Poetry configured for project-specific virtual environments"

    # Install dependencies
    info "Installing dependencies (this may take a few minutes)..."
    if poetry install; then
        success "Dependencies installed successfully"
    else
        error "Failed to install dependencies"
        exit 1
    fi

    # Verify installation
    if poetry run python -c "import vpsweb; print('VPSWeb import successful')" 2>/dev/null; then
        success "VPSWeb can be imported successfully"
    else
        error "VPSWeb import failed"
        exit 1
    fi
}

# Setup environment variables
setup_environment() {
    step "Setting up environment configuration..."

    cd "$PROJECT_ROOT"

    # Create environment file if it doesn't exist
    if [[ ! -f ".env.local" ]]; then
        if [[ -f ".env.local.template" ]]; then
            cp .env.local.template .env.local
            success "Environment file created from template"
        else
            # Create basic environment file
            cat > .env.local << EOF
# VPSWeb Environment Configuration
# Generated by setup.sh on $(date)

# Repository Configuration
REPO_ROOT=./repository_root
REPO_DATABASE_URL=sqlite+aiosqlite:///./repository_root/repo.db
REPO_HOST=127.0.0.1
REPO_PORT=8000
REPO_DEBUG=false
DEV_MODE=true

# Logging Configuration
VERBOSE_LOGGING=true
LOG_FORMAT=text

# Development Settings
PYTHONPATH=$(pwd)/src
EOF
            success "Basic environment file created"
        fi
    else
        info "Environment file already exists"
    fi

    # Set PYTHONPATH for current session
    export PYTHONPATH="${PROJECT_ROOT}/src:$PYTHONPATH"

    # Add to shell profile if not already there
    if ! grep -q "PYTHONPATH.*vpsweb" ~/.bashrc 2>/dev/null && ! grep -q "PYTHONPATH.*vpsweb" ~/.zshrc 2>/dev/null; then
        echo 'export PYTHONPATH="'$PROJECT_ROOT'/src:$PYTHONPATH"' >> ~/.bashrc
        echo 'export PYTHONPATH="'$PROJECT_ROOT'/src:$PYTHONPATH"' >> ~/.zshrc 2>/dev/null || true
        info "PYTHONPATH added to shell profile"
    fi

    success "Environment configuration completed"
}

# Note: Database setup is now handled by the dedicated setup-database.sh script
# Run: ./scripts/setup-database.sh init

# Verify setup
verify_setup() {
    step "Verifying setup..."

    cd "$PROJECT_ROOT"
    export PYTHONPATH="${PROJECT_ROOT}/src:$PYTHONPATH"

    # Test VPSWeb import
    if poetry run python -c "import vpsweb; print('✅ VPSWeb import successful')"; then
        success "VPSWeb import test passed"
    else
        error "VPSWeb import test failed"
        return 1
    fi

    # Test database connection
    if poetry run python -c "
from vpsweb.repository.service import RepositoryWebService
from vpsweb.repository.database import get_db, create_session
import os

try:
    # Use create_session for direct session access
    db = create_session()
    service = RepositoryWebService(db)
    stats = service.get_repository_stats()
    db.close()
    print(f'✅ Database connection successful')
    print(f'   - Total poems: {stats.total_poems}')
    print(f'   - Total translations: {stats.total_translations}')
except Exception as e:
    print(f'❌ Database connection failed: {e}')
    exit(1)
"; then
        success "Database connection test passed"
    else
        error "Database connection test failed"
        return 1
    fi

    # Test web server (basic check)
    if poetry run python -c "
from vpsweb.webui.main import app
print('✅ Web application can be initialized')
"; then
        success "Web application test passed"
    else
        error "Web application test failed"
        return 1
    fi

    return 0
}

# Create development scripts
create_dev_scripts() {
    step "Creating development scripts..."

    cd "$PROJECT_ROOT"

    # Create start script
    cat > scripts/start.sh << 'EOF'
#!/bin/bash
# VPSWeb Development Server Start Script

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

cd "$PROJECT_ROOT"
export PYTHONPATH="${PROJECT_ROOT}/src:$PYTHONPATH"

echo "Starting VPSWeb development server..."
echo "Access the web interface at: http://localhost:8000"
echo "Press Ctrl+C to stop the server"
echo

poetry run uvicorn vpsweb.webui.main:app \
    --host 127.0.0.1 \
    --port 8000 \
    --reload \
    --log-level debug
EOF

    # Create test script
    cat > scripts/test.sh << 'EOF'
#!/bin/bash
# VPSWeb Test Runner Script

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

cd "$PROJECT_ROOT"
export PYTHONPATH="${PROJECT_ROOT}/src:$PYTHONPATH"

echo "Running VPSWeb test suite..."

poetry run pytest tests/ -v --cov=src/vpsweb --cov-report=term-missing
EOF

    # Create reset script
    cat > scripts/reset.sh << 'EOF'
#!/bin/bash
# VPSWeb Database Reset Script

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

cd "$PROJECT_ROOT"

echo "Resetting VPSWeb database..."

# Stop any running processes
pkill -f "vpsweb" || true

# Remove database file
rm -f repository_root/repo.db

# Recreate database
mkdir -p repository_root
export PYTHONPATH="${PROJECT_ROOT}/src:$PYTHONPATH"
cd src/vpsweb/repository
poetry run alembic upgrade head
cd - > /dev/null

echo "Database reset complete!"
EOF

    # Make scripts executable
    chmod +x scripts/start.sh scripts/test.sh scripts/reset.sh

    success "Development scripts created"
}

# Show next steps
show_next_steps() {
    step "Setup completed successfully! 🎉"

    echo
    echo -e "${GREEN}VPSWeb development environment is ready!${NC}"
    echo
    echo -e "${CYAN}Next Steps:${NC}"
    echo "  1. Setup database:"
    echo "    ${YELLOW}./scripts/setup-database.sh init${NC}"
    echo
    echo "  2. Start development server:"
    echo "    ${YELLOW}./scripts/start.sh${NC}"
    echo
    echo "  3. Run tests:"
    echo "    ${YELLOW}./scripts/test.sh${NC}"
    echo
    echo -e "${CYAN}Database Management:${NC}"
    echo "  Initialize:    ${YELLOW}./scripts/setup-database.sh init${NC}"
    echo "  Reset:         ${YELLOW}./scripts/setup-database.sh reset${NC}"
    echo "  Backup:        ${YELLOW}./scripts/setup-database.sh backup${NC}"
    echo "  Status:        ${YELLOW}./scripts/setup-database.sh status${NC}"
    echo
    echo -e "${CYAN}Important Files:${NC}"
    echo "  - Configuration: ${YELLOW}.env.local${NC} (edit to add API keys)"
    echo "  - Database:      ${YELLOW}repository_root/repo.db${NC}"
    echo "  - Logs:          ${YELLOW}logs/vpsweb.log${NC}"
    echo "  - Documentation: ${YELLOW}docs/${NC}"
    echo
    echo -e "${CYAN}Web Interface:${NC}"
    echo "  - Main App:      ${YELLOW}http://localhost:8000${NC}"
    echo "  - API Docs:      ${YELLOW}http://localhost:8000/docs${NC}"
    echo "  - Health Check:  ${YELLOW}http://localhost:8000/health${NC}"
    echo
    echo -e "${RED}Before you start:${NC}"
    echo "  1. Edit ${YELLOW}.env.local${NC} and add your AI provider API keys"
    echo "  2. Configure at least one of: TONGYI_API_KEY or DEEPSEEK_API_KEY"
    echo "  3. Run ${YELLOW}./scripts/start.sh${NC} to launch the development server"
    echo
    echo -e "${GREEN}Happy coding! 🚀${NC}"
}

# Main setup function
main() {
    echo -e "${PURPLE}"
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║           VPSWeb Development Environment Setup              ║"
    echo "║                        v0.3.1                                 ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    echo

    # Initialize log file
    echo "VPSWeb Setup Log - $(date)" > "$LOG_FILE"
    echo "================================" >> "$LOG_FILE"

    # Run setup steps
    check_requirements
    setup_python_env
    setup_environment

    # Note: Database setup is now separate
    # Run: ./scripts/setup-database.sh init

    # Verify everything works
    if verify_setup; then
        create_dev_scripts
        show_next_steps
    else
        error "Setup verification failed. Check the log file: $LOG_FILE"
        exit 1
    fi
}

# Handle command line arguments
case "${1:-}" in
    --help|-h)
        echo "VPSWeb Development Environment Setup Script v0.3.1"
        echo
        echo "Usage: $0 [OPTIONS]"
        echo
        echo "Options:"
        echo "  --help, -h     Show this help message"
        echo "  --verify-only  Verify existing setup without making changes"
        echo "  --no-poetry    Skip Poetry installation/verification"
        echo "  --no-db        Skip database setup"
        echo
        exit 0
        ;;
    --verify-only)
        log "Verifying existing VPSWeb setup..."
        export PYTHONPATH="${PROJECT_ROOT:-$(pwd)}/src:$PYTHONPATH"
        if verify_setup; then
            success "VPSWeb setup verification passed!"
        else
            error "VPSWeb setup verification failed"
            exit 1
        fi
        ;;
    --no-poetry)
        warning "Skipping Poetry setup/verification"
        SKIP_POETRY=true
        main
        ;;
    --no-db)
        warning "Skipping database setup"
        SKIP_DB=true
        main
        ;;
    "")
        main
        ;;
    *)
        error "Unknown option: $1"
        echo "Use --help for usage information"
        exit 1
        ;;
esac