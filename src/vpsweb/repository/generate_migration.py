#!/usr/bin/env python3
"""
Simple script to generate initial migration for VPSWeb Repository v0.3.1
"""

import os
import sys
from pathlib import Path

# Add repository root to path
repo_root = Path(__file__).parent.parent.parent.parent
sys.path.insert(0, str(repo_root))

# Set up minimal imports
from sqlalchemy import create_engine
from sqlalchemy.orm import declarative_base
from sqlalchemy.pool import StaticPool

# Create database engine
database_url = "sqlite:///./repository_root/repo.db"
engine = create_engine(
    database_url,
    connect_args={"check_same_thread": False},
    poolclass=StaticPool,
)

# Create declarative base
Base = declarative_base()

# Import and register models
sys.path.insert(0, os.path.join(repo_root, "src", "vpsweb", "repository"))

# Import models with their columns defined inline
from sqlalchemy import Column, String, Text, DateTime, ForeignKey, JSON, Integer
from datetime import datetime
from sqlalchemy.sql import func


class Poem(Base):
    __tablename__ = "poems"

    id = Column(String(26), primary_key=True, index=True)
    poet_name = Column(String(200), nullable=False, index=True)
    poem_title = Column(String(300), nullable=False, index=True)
    source_language = Column(String(10), nullable=False, index=True)
    original_text = Column(Text, nullable=False)
    metadata_json = Column(Text, nullable=True)
    created_at = Column(
        DateTime, nullable=False, default=datetime.utcnow, server_default=func.now()
    )
    updated_at = Column(
        DateTime,
        nullable=False,
        default=datetime.utcnow,
        server_default=func.now(),
        onupdate=datetime.utcnow,
    )


class Translation(Base):
    __tablename__ = "translations"

    id = Column(String(26), primary_key=True, index=True)
    poem_id = Column(
        String(26),
        ForeignKey("poems.id", ondelete="CASCADE"),
        nullable=False,
        index=True,
    )
    translator_type = Column(String(10), nullable=False, index=True)
    translator_info = Column(String(200), nullable=True)
    target_language = Column(String(10), nullable=False, index=True)
    translated_text = Column(Text, nullable=False)
    quality_rating = Column(Integer, nullable=True)
    raw_path = Column(String(500), nullable=True)
    created_at = Column(
        DateTime, nullable=False, default=datetime.utcnow, server_default=func.now()
    )


class AILog(Base):
    __tablename__ = "ai_logs"

    id = Column(String(26), primary_key=True, index=True)
    translation_id = Column(
        String(26),
        ForeignKey("translations.id", ondelete="CASCADE"),
        nullable=False,
        index=True,
    )
    model_name = Column(String(100), nullable=False, index=True)
    workflow_mode = Column(String(20), nullable=False, index=True)
    token_usage_json = Column(Text, nullable=True)
    cost_info_json = Column(Text, nullable=True)
    runtime_seconds = Column(Integer, nullable=True)
    notes = Column(Text, nullable=True)
    created_at = Column(
        DateTime, nullable=False, default=datetime.utcnow, server_default=func.now()
    )


class HumanNote(Base):
    __tablename__ = "human_notes"

    id = Column(String(26), primary_key=True, index=True)
    translation_id = Column(
        String(26),
        ForeignKey("translations.id", ondelete="CASCADE"),
        nullable=False,
        index=True,
    )
    note_text = Column(Text, nullable=False)
    created_at = Column(
        DateTime, nullable=False, default=datetime.utcnow, server_default=func.now()
    )


if __name__ == "__main__":
    # Create the migration file manually
    migration_content = '''"""Initial 4-table schema for v0.3.1 prototype

Revision ID: 001_initial_schema
Revises:
Create Date: 2025-01-19 12:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision = '001_initial_schema'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Create poems table
    op.create_table('poems',
    sa.Column('id', sa.String(length=26), nullable=False),
    sa.Column('poet_name', sa.String(length=200), nullable=False),
    sa.Column('poem_title', sa.String(length=300), nullable=False),
    sa.Column('source_language', sa.String(length=10), nullable=False),
    sa.Column('original_text', sa.Text(), nullable=False),
    sa.Column('metadata_json', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_poems_id'), 'poems', ['id'], unique=False)
    op.create_index(op.f('ix_poems_poet_name'), 'poems', ['poet_name'], unique=False)
    op.create_index(op.f('ix_poems_poem_title'), 'poems', ['poem_title'], unique=False)
    op.create_index(op.f('ix_poems_source_language'), 'poems', ['source_language'], unique=False)
    op.create_index('idx_poems_created_at', 'poems', ['created_at'], unique=False)

    # Create translations table
    op.create_table('translations',
    sa.Column('id', sa.String(length=26), nullable=False),
    sa.Column('poem_id', sa.String(length=26), nullable=False),
    sa.Column('translator_type', sa.String(length=10), nullable=False),
    sa.Column('translator_info', sa.String(length=200), nullable=True),
    sa.Column('target_language', sa.String(length=10), nullable=False),
    sa.Column('translated_text', sa.Text(), nullable=False),
    sa.Column('quality_rating', sa.Integer(), nullable=True),
    sa.Column('raw_path', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['poem_id'], ['poems.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_translations_id'), 'translations', ['id'], unique=False)
    op.create_index(op.f('ix_translations_poem_id'), 'translations', ['poem_id'], unique=False)
    op.create_index(op.f('ix_translations_translator_type'), 'translations', ['translator_type'], unique=False)
    op.create_index(op.f('ix_translations_target_language'), 'translations', ['target_language'], unique=False)
    op.create_index('idx_translations_created_at', 'translations', ['created_at'], unique=False)

    # Create ai_logs table
    op.create_table('ai_logs',
    sa.Column('id', sa.String(length=26), nullable=False),
    sa.Column('translation_id', sa.String(length=26), nullable=False),
    sa.Column('model_name', sa.String(length=100), nullable=False),
    sa.Column('workflow_mode', sa.String(length=20), nullable=False),
    sa.Column('token_usage_json', sa.Text(), nullable=True),
    sa.Column('cost_info_json', sa.Text(), nullable=True),
    sa.Column('runtime_seconds', sa.Integer(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['translation_id'], ['translations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ai_logs_id'), 'ai_logs', ['id'], unique=False)
    op.create_index(op.f('ix_ai_logs_translation_id'), 'ai_logs', ['translation_id'], unique=False)
    op.create_index(op.f('ix_ai_logs_model_name'), 'ai_logs', ['model_name'], unique=False)
    op.create_index(op.f('ix_ai_logs_workflow_mode'), 'ai_logs', ['workflow_mode'], unique=False)
    op.create_index('idx_ai_logs_created_at', 'ai_logs', ['created_at'], unique=False)

    # Create human_notes table
    op.create_table('human_notes',
    sa.Column('id', sa.String(length=26), nullable=False),
    sa.Column('translation_id', sa.String(length=26), nullable=False),
    sa.Column('note_text', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['translation_id'], ['translations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_human_notes_id'), 'human_notes', ['id'], unique=False)
    op.create_index(op.f('ix_human_notes_translation_id'), 'human_notes', ['translation_id'], unique=False)
    op.create_index('idx_human_notes_created_at', 'human_notes', ['created_at'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_human_notes_created_at', table_name='human_notes')
    op.drop_index(op.f('ix_human_notes_translation_id'), table_name='human_notes')
    op.drop_index(op.f('ix_human_notes_id'), table_name='human_notes')
    op.drop_table('human_notes')
    op.drop_index('idx_ai_logs_created_at', table_name='ai_logs')
    op.drop_index(op.f('ix_ai_logs_workflow_mode'), table_name='ai_logs')
    op.drop_index(op.f('ix_ai_logs_model_name'), table_name='ai_logs')
    op.drop_index(op.f('ix_ai_logs_translation_id'), table_name='ai_logs')
    op.drop_index(op.f('ix_ai_logs_id'), table_name='ai_logs')
    op.drop_table('ai_logs')
    op.drop_index('idx_translations_created_at', table_name='translations')
    op.drop_index(op.f('ix_translations_target_language'), table_name='translations')
    op.drop_index(op.f('ix_translations_translator_type'), table_name='translations')
    op.drop_index(op.f('ix_translations_poem_id'), table_name='translations')
    op.drop_index(op.f('ix_translations_id'), table_name='translations')
    op.drop_table('translations')
    op.drop_index('idx_poems_created_at', table_name='poems')
    op.drop_index(op.f('ix_poems_source_language'), table_name='poems')
    op.drop_index(op.f('ix_poems_poem_title'), table_name='poems')
    op.drop_index(op.f('ix_poems_poet_name'), table_name='poems')
    op.drop_index(op.f('ix_poems_id'), table_name='poems')
    op.drop_table('poems')
    # ### end Alembic commands ###
'''

    # Write migration file
    migrations_dir = Path(__file__).parent / "migrations" / "versions"
    migrations_dir.mkdir(parents=True, exist_ok=True)

    migration_file = migrations_dir / "001_initial_schema.py"
    with open(migration_file, "w") as f:
        f.write(migration_content)

    print(f"Created migration file: {migration_file}")
    print("Initial 4-table schema migration generated successfully!")
