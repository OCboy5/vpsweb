outputs/json/poets/Ted Hughes/Ted Hughes_the_warm_and_the_cold_english_chinese_hybrid_20251026_222840_896357ec.json:
<code>
{
  "workflow_id": "3eebcd2f-1885-4a95-a411-d0dd896357ec",
  "input": {
    "original_poem": "Freezing dusk is closing\nLike a slow trap of steel\nOn trees and roads and hills and all\nThat can no longer feel.\nBut the carp is in its depth\nLike a planet in its heaven.\nAnd the badger in its bedding\nLike a loaf in the oven.\nAnd the butterfly in its mummy\nLike a viol in its case.\nAnd the owl in its feathers\nLike a doll in its lace.\n\nFreezing dusk has tightened\nLike a nut screwed tight\nOn the starry aeroplane\nOf the soaring night.\nBut the trout is in its hole\nLike a chuckle in a sleeper.\nThe hare strays down the highway\nLike a root going deeper.\nThe snail is dry in the outhouse\nLike a seed in a sunflower.\nThe owl is pale on the gatepost\nLike a clock on its tower.\n\nMoonlight freezes the shaggy world\nLike a mammoth of ice -\nThe past and the future\nAre the jaws of a steel vice.\nBut the cod is in the tide-rip\nLike a key in a purse.\nThe deer are on the bare-blown hill\nLike smiles on a nurse.\nThe flies are behind the plaster\nLike the lost score of a jig.\nSparrows are in the ivy-clump\nLike money in a pig.\n\nSuch a frost\nThe flimsy moon\nHas lost her wits.\n\nA star falls.\n\nThe sweating farmers\nTurn in their sleep\nLike oxen on spits.",
    "source_lang": "English",
    "target_lang": "Chinese",
    "metadata": {
      "id": "01K8GD8C28JQEQ1WTRPFENWBSM",
      "title": "The Warm and the Cold",
      "author": "Ted Hughes"
    }
  },
  "initial_translation": {
    "initial_translation": "\n冻结的暮色正缓缓合拢  \n如同钢铁制成的慢动捕兽夹  \n收紧于树木、道路与山丘之上  \n以及一切不再能感知的万物。  \n但鲤鱼深潜于水底  \n如行星悬浮于天穹；  \n獾蜷卧于巢穴  \n如面包置于烤炉中；  \n蝴蝶封存于茧中  \n如提琴安放于琴匣；  \n猫头鹰裹在羽翼里  \n如玩偶缀着蕾丝。\n\n冻结的暮色愈发紧绷  \n如同完全拧紧的螺母  \n套牢那缀满星辰的夜之航机  \n正凌空滑翔。  \n但鳟鱼藏身洞穴  \n如睡梦中的一声轻笑；  \n野兔沿公路游荡  \n如根须向深处延伸；  \n蜗牛干藏于外屋  \n如葵花籽藏于花盘；  \n猫头鹰苍白地栖于门柱  \n如钟悬于塔楼。\n\n月光将毛茸的世界凝冻  \n如同一头冰封的猛犸——  \n过去与未来  \n是钢钳的两颚。  \n但鳕鱼游于潮涌的裂隙  \n如钥匙藏于钱袋；  \n鹿群立于寒风肆虐的荒丘  \n如护士脸上的微笑；  \n苍蝇匿于墙灰之后  \n如遗失的舞曲乐谱；  \n麻雀栖于常春藤丛  \n如钱币藏于存钱罐。\n\n如此严霜  \n那单薄的月亮  \n已失却神智。\n\n一颗星坠落。\n\n出汗的农夫们  \n在睡梦中翻转  \n如铁叉上的烤牛。",
    "initial_translation_notes": "\n本诗《温暖与寒冷》由英国著名诗人特德·休斯创作，体现其典型的自然主义风格：冷峻、具象、充满原始生命力的意象，常以动物象征内在的静谧与抗争。休斯作为“运动派”诗人之一，擅长用简练而富有张力的语言描绘自然界的残酷与秩序。此诗写于20世纪中后期，延续其对自然与人类处境的哲思，通过“寒冷”与“生命潜藏”之间的对比，展现严酷环境中静默却坚韧的生命力。\n\n翻译过程中，我面临以下挑战及应对策略：\n\n一、开篇句“Freezing dusk is closing / Like a slow trap of steel”的处理  \n原句以“freezing dusk”营造出寒冷渐侵的压迫感，“slow trap of steel”则赋予暮色以机械性、不可抗拒的暴力意象。我译为“冻结的暮色正缓缓合拢 / 如同钢铁制成的慢动捕兽夹”，其中“慢动捕兽夹”虽非日常用语，但保留了“slow trap”的动态与威胁性，且“夹”字呼应后文“钢钳”的意象，形成结构上的统一。“正缓缓合拢”以进行时态传达“is closing”的渐进过程，增强画面感。\n\n二、比喻系统的保留与文化适配  \n诗中大量使用“X like Y”的明喻结构，构建出寒冷世界中生命藏匿的图景。我力求保留所有本体与喻体的对应关系，并确保中文语境下仍具诗意与逻辑连贯。例如：\n- “Like a planet in its heaven” 译为“如行星悬浮于天穹”，“天穹”比“天空”更具宇宙感与庄严性；\n- “Like a chuckle in a sleeper” 译为“如睡梦中的一声轻笑”，“轻笑”传达“chuckle”的细微愉悦感，暗示生命潜藏中的生机；\n- “Like smiles on a nurse” 译为“如护士脸上的微笑”，虽文化中护士形象偏现代，但此意象强调“克制中的温柔”，不宜替换，故保留原喻。\n\n三、节奏与形式的平衡  \n原诗为自由诗体，三节递进，每节四组比喻，结构工整，节奏沉缓如寒夜降临。中文无法完全复制英语的重音韵律，但我通过：\n- 保持每行字数相近（约14–18字），形成视觉与听觉的节奏感；\n- 使用对仗与平行结构（如“藏身”“栖于”“匿于”“游于”）增强内在韵律；\n- 在关键句如“过去与未来 / 是钢钳的两颚”使用短句斩截收束，模拟原诗的冷峻语气。\n\n四、文化意象的处理  \n- “spits”（烤叉）原指烤肉用的长铁叉，常用于烤整只牲畜。译为“铁叉上的烤牛”虽稍显直白，但“烤牛”能唤起沉重翻转的视觉与痛苦感，呼应农夫翻身的不安梦境，且“牛”在中国文化中亦具劳作象征，故未改为“猪”或“羊”。\n- “money in a pig”指西方儿童存钱用的瓷猪储蓄罐，中文“存钱罐”已广为人知，故译为“如钱币藏于存钱罐”，既保留童趣又不失原意。\n\n五、结尾的戏剧性与象征  \n“一颗星坠落”独立成行，如一声轻响打破寂静，我保留单句分行，突出其象征意味——可能是希望的陨落，也可能是觉醒的火花。“出汗的农夫们 / 在睡梦中翻转 / 如氧叉上的烤牛”中，“出汗”暗示内在焦虑或生命力的挣扎，与自然界动物的安眠形成对比，体现人类在自然压迫下的无意识抗争。\n\n综上，本译文力求在忠实原意的基础上，重建中文的诗意空间，使休斯笔下那冷峻、神秘、充满潜流的世界，在汉语中依然清晰可感、寒光闪烁。",
    "translated_poem_title": "温暖与寒冷",
    "translated_poet_name": "特德·休斯",
    "timestamp": "2025-10-26T22:25:06.631696",
    "model_info": {
      "provider": "tongyi",
      "model": "qwen-plus-latest",
      "temperature": "0.7"
    },
    "tokens_used": 2638,
    "prompt_tokens": 1329,
    "completion_tokens": 1309,
    "duration": 40.842111110687256,
    "cost": 0.0036812
  },
  "editor_review": {
    "editor_suggestions": "\nSuggestions for Improving the Translation of \"The Warm and the Cold\" by Ted Hughes:\n1. Line: \"如同钢铁制成的慢动捕兽夹\" (for \"Like a slow trap of steel\")\n   Issue: \"慢动捕兽夹\" is awkward and unpoetic, potentially confusing readers with its mechanical literalness.\n   Recommendation: Replace with a more fluid and evocative phrase that retains the gradual, threatening imagery.\n   Justification: The original \"slow trap of steel\" emphasizes inexorable, mechanical closure, which should feel natural in Chinese.\n   Example Revision: \"如同缓缓收紧的钢夹\" or \"如同钢阱徐徐合拢\".\n   Alternatives: For difficult lines, consider \"如同钢铁陷阱缓慢逼近\" to blend threat and motion.\n\n2. Line: \"如睡梦中的一声轻笑\" (for \"Like a chuckle in a sleeper\")\n   Issue: \"轻笑\" may not fully capture the subdued, internal nature of \"chuckle,\" which implies a soft, almost unconscious sound.\n   Recommendation: Use a term that emphasizes the sound's intimacy within sleep.\n   Justification: The original conveys a hidden, gentle amusement that is part of the sleeper's experience.\n   Example Revision: \"如睡者喉间的低笑\" or \"如沉睡中的窃笑\".\n   Alternatives: \"如梦中一声轻哂\" to align with Chinese poetic subtlety.\n\n3. Line: \"如护士脸上的微笑\" (for \"Like smiles on a nurse\")\n   Issue: The cultural reference to a nurse's smile may not evoke the same controlled, professional warmth in Chinese readers, potentially reducing emotional resonance.\n   Recommendation: Adapt to a more culturally familiar image, such as a mother or serene figure, to maintain the original's tone of restrained comfort.\n   Justification: Hughes' imagery often relies on universal symbols; in Chinese context, alternatives can enhance relatability.\n   Example Revision: \"如慈母面上的微笑\" or \"如修女脸上的安详\".\n   Alternatives: If retaining \"护士,\" add a note to clarify its symbolic meaning of composed warmth.\n\n4. Line: \"如铁叉上的烤牛\" (for \"Like oxen on spits\")\n   Issue: \"烤牛\" is overly graphic and may jar readers, detracting from the metaphorical weight of human struggle.\n   Recommendation: Soften the phrasing to maintain the visceral image while improving elegance.\n   Justification: The original uses \"oxen on spits\" to symbolize helpless turning, not just literal roasting.\n   Example Revision: \"如烤叉上的牲口\" or \"如铁叉炙转的牛\".\n   Alternatives: \"如转烤的全牛\" to emphasize the whole-body imagery without excessive bluntness.\n\n5. Line: \"野兔沿公路游荡\" (for \"The hare strays down the highway\")\n   Issue: \"游荡\" implies aimless wandering, which may not fully capture \"strays\" connotation of slow, deliberate deviation or exploration.\n   Recommendation: Use a word that conveys leisurely, meandering movement with poetic flow.\n   Justification: The original suggests a natural, unhurried progression that contrasts with the cold setting.\n   Example Revision: \"野兔徜徉于公路\" or \"野兔漫行在道旁\".\n   Alternatives: \"野兔溜达在 highway\" but ensure it fits the rhythm.\n\n6. Line: \"蜗牛干藏于外屋\" (for \"The snail is dry in the outhouse\")\n   Issue: \"干藏\" is an uncommon compound that may confuse readers; it lacks the clarity of the original's simple description.\n   Recommendation: Rephrase for naturalness, using standard terms for \"dry\" and \"hiding.\"\n   Justification: \"Dry\" in the original highlights desiccation and concealment, which should be immediately understandable.\n   Example Revision: \"蜗牛干燥地躲在外屋\" or \"蜗牛干缩在棚屋内\".\n   Alternatives: \"蜗牛在外屋中干涸\" to emphasize the state of being dry.\n\n7. Line: \"鳕鱼游于潮涌的裂隙\" (for \"The cod is in the tide-rip\")\n   Issue: \"潮涌的裂隙\" inaccurately renders \"tide-rip,\" which refers to turbulent water areas, not fissures, risking loss of the oceanic imagery.\n   Recommendation: Use a term that evokes the churning, dynamic nature of tide-rips.\n   Justification: The original contrasts the cod's placement in rough waters with hidden safety.\n   Example Revision: \"鳕鱼潜于潮汐激流\" or \"鳕鱼在潮涌中游弋\".\n   Alternatives: \"鳕鱼藏于潮浪交汇处\" for better cultural and natural accuracy.\n\n8. Line: \"毛茸的世界\" (for \"The shaggy world\")\n   Issue: \"毛茸\" is informal and lacks the poetic elegance of \"shaggy,\" which describes a rough, hairy texture akin to a mammoth.\n   Recommendation: Choose a more vivid and aesthetically pleasing adjective.\n   Justification: Hughes' \"shaggy\" personifies the world as wild and untamed, which should resonate in translation.\n   Example Revision: \"蓬松的世界\" or \"毛糙的天地\".\n   Alternatives: \"茸毛覆裹的世界\" to enhance imagery without sacrificing naturalness.\n\n9. Line: Overall rhythm and musicality\n   Issue: Some lines, like \"收紧于树木、道路与山丘之上,\" feel slightly clunky, disrupting the original's free-verse flow and cadence.\n   Recommendation: Adjust line lengths and word order for smoother rhythm, mimicking the original's沉缓 pace.\n   Justification: Hughes' poem relies on a balanced, gradual build-up that should be mirrored in Chinese.\n   Example Revision: Shorten to \"收紧树木、道路、山丘及万物\" for better parallelism.\n   Alternatives: Incorporate more parallel structures, such as repeating prepositions for consistency.\n\n10. Line: \"如提琴安放于琴匣\" (for \"Like a viol in its case\")\n    Issue: While accurate, \"安放\" may sound too formal or static, missing the original's sense of protective containment.\n    Recommendation: Use a verb that implies gentle placement or security.\n    Justification: The metaphor emphasizes safekeeping and stillness, which should feel natural in Chinese.\n    Example Revision: \"如提琴静卧琴匣\" or \"如提琴藏于匣中\".\n    Alternatives: \"如提琴安居琴盒\" to blend elegance and clarity.\n\nOverall, the translation skillfully captures Ted Hughes' stark contrasts and naturalistic imagery, maintaining faithfulness and emotional impact. However, refining cultural references and word choices could enhance elegance and reader immersion, ensuring the poem's chilling beauty resonates fully in Chinese.",
    "timestamp": "2025-10-26T22:27:58.750260",
    "model_info": {
      "provider": "deepseek",
      "model": "deepseek-reasoner",
      "temperature": "0.1"
    },
    "tokens_used": 6670,
    "prompt_tokens": 1922,
    "completion_tokens": 4748,
    "duration": 172.09676694869995,
    "cost": 0.018088
  },
  "revised_translation": {
    "revised_translation": "\n冻结的暮色正缓缓合拢  \n如同钢阱徐徐闭合  \n收紧树木、道路、山丘，以及  \n一切不再能感知的万物。  \n但鲤鱼深潜于水底  \n如行星悬浮于天穹；  \n獾蜷卧于巢穴  \n如面包置于烤炉；  \n蝴蝶封存于茧中  \n如提琴静卧琴匣；  \n猫头鹰裹在羽翼里  \n如玩偶缀着蕾丝。\n\n冻结的暮色愈发紧绷  \n如同螺母完全拧紧  \n套牢那缀满星辰的夜之航机  \n正凌空滑翔。  \n但鳟鱼藏身洞穴  \n如睡者喉间的低笑；  \n野兔徜徉于公路  \n如根须向深处延伸；  \n蜗牛干缩在棚屋内  \n如葵花籽藏于花盘；  \n猫头鹰苍白地栖于门柱  \n如钟悬于塔楼。\n\n月光将茸毛覆裹的世界凝冻  \n如同一头冰封的猛犸——  \n过去与未来  \n是钢钳的两颚。  \n但鳕鱼潜于潮汐激流  \n如钥匙藏于钱袋；  \n鹿群立于寒风肆虐的荒丘  \n如修女脸上的安详；  \n苍蝇匿于墙灰之后  \n如遗失的舞曲乐谱；  \n麻雀栖于常春藤丛  \n如钱币藏于存钱罐。\n\n如此严霜  \n那单薄的月亮  \n已失却神智。\n\n一颗星坠落。\n\n出汗的农夫们  \n在睡梦中翻转  \n如烤叉上的牲口。",
    "revised_translation_notes": "\n1. Major revisions and the reasoning behind them:\n\n- \"如同钢铁制成的慢动捕兽夹\" → \"如同钢阱徐徐闭合\"  \n  Implemented expert suggestion to replace the awkward \"慢动捕兽夹\" with a more poetic and fluid image. \"钢阱\" (steel trap) preserves the mechanical menace, while \"徐徐闭合\" evokes the slow, inevitable closure. This improves both imagery and rhythm.\n\n- \"如睡梦中的一声轻笑\" → \"如睡者喉间的低笑\"  \n  Adopted the expert’s recommendation to better capture the intimate, internal quality of \"chuckle in a sleeper.\" \"喉间的低笑\" suggests a soft, almost involuntary sound within the sleeper, enhancing the metaphor’s subtlety and bodily resonance.\n\n- \"如护士脸上的微笑\" → \"如修女脸上的安详\"  \n  Revised to align with cultural resonance. While \"护士\" is accurate, the emotional connotation of composed, serene warmth is more universally evoked by \"修女\" in Chinese poetic context. \"安详\" also better captures the stillness and quiet dignity implied in the original.\n\n- \"如铁叉上的烤牛\" → \"如烤叉上的牲口\"  \n  Softened the graphic \"烤牛\" to \"牲口,\" which retains the metaphor of helpless turning and suffering without excessive literalness. \"烤叉\" is more poetic than \"铁叉\" and commonly used in literary descriptions of roasting, preserving the visceral yet symbolic tone.\n\n- \"野兔沿公路游荡\" → \"野兔徜徉于公路\"  \n  \"徜徉\" conveys a leisurely, meandering movement that better matches the original \"strays\" and contrasts with the cold, rigid environment. It enhances the poetic flow and avoids the negative connotation of aimlessness in \"游荡.\"\n\n- \"蜗牛干藏于外屋\" → \"蜗牛干缩在棚屋内\"  \n  \"干藏\" is indeed awkward and non-idiomatic. \"干缩\" accurately describes the physical state of a dormant snail, while \"棚屋\" is a more natural translation of \"outhouse\" in Chinese rural context than the vague \"外屋.\"\n\n- \"鳕鱼游于潮涌的裂隙\" → \"鳕鱼潜于潮汐激流\"  \n  \"潮涌的裂隙\" inaccurately suggests geological fissures. \"潮汐激流\" correctly conveys \"tide-rip\" as a turbulent, churning area of water. \"潜于\" emphasizes the cod’s hidden, secure presence within the chaos, aligning with the poem’s theme of warmth within cold.\n\n- \"毛茸的世界\" → \"茸毛覆裹的世界\"  \n  \"毛茸\" is too childish and informal. \"茸毛覆裹\" enhances the image of a shaggy, hairy world being encased in ice, adding poetic texture and visual richness while preserving the metaphor of the mammoth.\n\n- Rhythm and line structure adjustments:  \n  Shortened \"收紧于树木、道路与山丘之上\" to \"收紧树木、道路、山丘，以及\" for tighter parallelism and smoother cadence. Removed redundant prepositions to mirror the original’s free-verse concision. This improves musicality and pacing.\n\n- \"如提琴安放于琴匣\" → \"如提琴静卧琴匣\"  \n  \"静卧\" conveys peaceful, secure containment more elegantly than the formal \"安放.\" It adds stillness and intimacy, enhancing the metaphor’s emotional weight.\n\n2. Expert suggestions not implemented:\n\n- None of the expert suggestions were outright rejected. All were either implemented or adapted with slight improvements (e.g., \"修女脸上的安详\" instead of \"慈母\" to preserve a more neutral, universal tone). The goal was to refine, not resist.\n\n3. Balancing original essence and Chinese effectiveness:\n\nThe poem juxtaposes cold, mechanical imagery with warm, organic metaphors of shelter and continuity. This contrast is preserved through careful word choice: \"钢阱,\" \"螺母,\" \"钢钳\" for cold rigidity; \"静卧,\" \"潜于,\" \"安详\" for warmth and protection. Cultural substitutions (e.g., \"修女\") were made only when they enhanced universality without distorting meaning. The free-verse structure, line breaks, and stanzaic form are strictly maintained to honor Hughes’ form.\n\n4. Particular challenges and resolutions:\n\n- Maintaining the mechanical yet poetic tone of similes (e.g., \"Like a slow trap of steel\") required balancing literal accuracy with lyrical flow. Solved by using terms like \"钢阱\" and \"徐徐闭合\" that are both precise and evocative.\n\n- The final image of farmers \"turning like oxen on spits\" risks being too grotesque. Mitigated by using \"烤叉上的牲口,\" which softens the violence while preserving the metaphor of helpless, cyclical suffering.\n\n- Ensuring musicality without rhyme: Hughes’ poem relies on cadence and internal rhythm. Read aloud, the revised version flows with a steady, sinking pace, mirroring the \"freezing dusk.\" Line lengths and pauses were adjusted to match the original’s breath-like rhythm.\n\nOverall, the revision enhances poetic quality, cultural resonance, and linguistic elegance while remaining faithful to Hughes’ stark, elemental vision.",
    "refined_translated_poem_title": "温暖与寒冷",
    "refined_translated_poet_name": "特德·休斯",
    "timestamp": "2025-10-26T22:28:40.598980",
    "model_info": {
      "provider": "tongyi",
      "model": "qwen-plus-latest",
      "temperature": "0.2"
    },
    "tokens_used": 4505,
    "prompt_tokens": 2972,
    "completion_tokens": 1533,
    "duration": 41.82594585418701,
    "cost": 0.0054436
  },
  "total_tokens": 13813,
  "duration_seconds": 254.83063626289368
}
</code>

src/vpsweb/webui/web/templates/poem_detail.html:
<code>
{% extends 'base.html' %}
{% block title %}{{ poem.poem_title }} by {{ poem.poet_name }} - VPSWeb Repository{% endblock %}

{% block content %}
<div class="px-4 py-6">
    <!-- Breadcrumb -->
    <nav class="flex mb-6" aria-label="Breadcrumb">
        <ol class="inline-flex items-center space-x-1 md:space-x-3">
            <li class="inline-flex items-center">
                <a href="/" class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-primary-600">
                    Dashboard
                </a>
            </li>
            <li>
                <div class="flex items-center">
                    <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"/>
                    </svg>
                    <a href="/poems" class="ml-1 text-sm font-medium text-gray-700 hover:text-primary-600 md:ml-2">
                        Poems
                    </a>
                </div>
            </li>
            <li aria-current="page">
                <div class="flex items-center">
                    <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"/>
                    </svg>
                    <span class="ml-1 text-sm font-medium text-gray-500 md:ml-2">{{ poem.poem_title }}</span>
                </div>
            </li>
        </ol>
    </nav>

    <!-- Poem Header -->
    <div class="bg-white shadow rounded-lg mb-6">
        <div class="px-4 py-5 sm:p-6">
            <div class="flex justify-between items-start mb-6">
                <div class="flex-1">
                    <h1 class="text-2xl font-bold text-gray-900 mb-2">{{ poem.poem_title }}</h1>
                    <p class="text-lg text-gray-600 mb-1">by {{ poem.poet_name }}</p>
                    <div class="flex items-center space-x-4 text-sm text-gray-500">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                            {{ poem.source_language }}
                        </span>
                        <span>Created {{ poem.created_at.strftime('%B %d, %Y') }}</span>
                        <span>ID: {{ poem.id[:8] }}...</span>
                    </div>
                </div>
                <div class="flex space-x-2 ml-4">
                    <a href="/poems/{{ poem.id }}/edit" class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                        </svg>
                        Edit
                    </a>
                    <button onclick="deletePoem()" class="inline-flex items-center px-3 py-2 border border-red-300 shadow-sm text-sm leading-4 font-medium rounded-md text-red-700 bg-white hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                        </svg>
                        Delete
                    </button>
                </div>
            </div>

            <!-- Poem Content -->
            <div class="bg-gray-50 rounded-lg p-6">
<div                <div class="poetry-text text-gray-700 whitespace-pre-wrap">{{ poem.original_text }}</div>
                {% if poem.metadata_json %}
                <div class="mt-6 pt-6 border-t border-gray-200">
                    <h4 class="text-sm font-medium text-gray-900 mb-2">Metadata</h4>
                    <pre class="text-xs text-gray-600 bg-white p-3 rounded border overflow-auto">{{ poem.metadata_json }}</pre>
                </div>
                {% endif %}
            </div>
        </div>
    </div>

    <!-- Workflow Launch Section -->
    <div class="bg-white shadow rounded-lg mb-6">
        <div class="px-4 py-5 sm:p-6">
            <h2 class="text-xl font-medium text-gray-900 mb-4">Start AI Translation Workflow</h2>

            <!-- Workflow Configuration -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Target Language</label>
                    <select id="workflow-target-language" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500">
                        <option value="">Select language</option>
                        <option value="Chinese">Chinese (中文)</option>
                        <option value="English">English</option>
                        <option value="Japanese">Japanese (日本語)</option>
                        <option value="Korean">Korean (한국어)</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Workflow Mode</label>
                    <select id="workflow-mode" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500">
                        <option value="hybrid">Hybrid (Recommended)</option>
                        <option value="reasoning">Reasoning Mode</option>
                        <option value="non_reasoning">Non-Reasoning Mode</option>
                    </select>
                </div>
                <div class="flex items-end">
                    <button id="start-workflow-btn" onclick="startWorkflow()" class="w-full inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                        </svg>
                        <span id="workflow-btn-text">Start Translation</span>
                    </button>
                </div>
            </div>

            <!-- Workflow Progress (Initially Hidden) -->
            <div id="workflow-progress" class="hidden">
                <div class="border-t pt-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Translation Progress</h3>

                    <!-- Progress Bar -->
                    <div class="mb-4">
                        <div class="flex justify-between items-center mb-2">
                            <span class="text-sm font-medium text-gray-700">Overall Progress</span>
                            <span class="text-sm text-gray-500" id="workflow-percentage">0%</span>
                        </div>
                        <div class="w-full bg-gray-200 rounded-full h-3">
                            <div id="workflow-progress-bar" class="bg-primary-600 h-3 rounded-full transition-all duration-300 ease-out" style="width: 0%"></div>
                        </div>
                    </div>

                    <!-- Step Indicators -->
                    <div class="grid grid-cols-3 gap-4 mb-6">
                        <div class="text-center" id="initial-translation-indicator">
                            <div class="w-10 h-10 mx-auto mb-2 rounded-full bg-gray-200 flex items-center justify-center">
                                <span class="text-sm font-medium text-gray-600">1</span>
                            </div>
                            <p class="text-sm font-medium text-gray-900">Initial Translation</p>
                            <p class="text-xs text-gray-500" id="initial-translation-status">Waiting</p>
                        </div>
                        <div class="text-center" id="editor-review-indicator">
                            <div class="w-10 h-10 mx-auto mb-2 rounded-full bg-gray-200 flex items-center justify-center">
                                <span class="text-sm font-medium text-gray-600">2</span>
                            </div>
                            <p class="text-sm font-medium text-gray-900">Editor Review</p>
                            <p class="text-xs text-gray-500" id="editor-review-status">Waiting</p>
                        </div>
                        <div class="text-center" id="translator-revision-indicator">
                            <div class="w-10 h-10 mx-auto mb-2 rounded-full bg-gray-200 flex items-center justify-center">
                                <span class="text-sm font-medium text-gray-600">3</span>
                            </div>
                            <p class="text-sm font-medium text-gray-900">Translator Revision</p>
                            <p class="text-xs text-gray-500" id="translator-revision-status">Waiting</p>
                        </div>
                    </div>

                    <!-- Enhanced Status Messages -->
                    <div class="bg-blue-50 border border-blue-200 rounded-md p-4">
                        <div class="flex">
                            <svg id="workflow-spinner" class="animate-spin h-5 w-5 text-blue-600 mr-3" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            <div class="flex-1">
                                <p class="text-sm text-blue-800 font-medium" id="workflow-current-step">Initializing translation workflow...</p>
                                <p class="text-xs text-blue-600 mt-1" id="workflow-step-details">Starting workflow...</p>
                                <p class="text-xs text-gray-500 mt-1" id="workflow-timing">Started just now</p>

                                <!-- Step Progress Details (Initially Hidden) -->
                                <div id="step-progress-details" class="mt-3 space-y-2 hidden">
                                    <div class="text-xs text-gray-600 font-medium">Step Progress:</div>
                                    <div id="step-progress-list" class="space-y-1">
                                        <!-- Step progress items will be added here dynamically -->
                                    </div>
                                </div>
                            </div>
                            <button onclick="cancelWorkflow()" class="ml-4 text-red-600 hover:text-red-800">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                                </svg>
                            </button>
                        </div>
                    </div>

                    <!-- Error Display (Initially Hidden) -->
                    <div id="workflow-error" class="hidden mt-4 bg-red-50 border border-red-200 rounded-md p-4">
                        <div class="flex">
                            <svg class="h-5 w-5 text-red-400 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                            <div class="flex-1">
                                <p class="text-sm text-red-800" id="workflow-error-message">An error occurred</p>
                                <div class="mt-2">
                                    <button onclick="retryWorkflow()" class="text-sm text-red-700 hover:text-red-900 font-medium">Retry</button>
                                    <span class="mx-2">•</span>
                                    <button onclick="resetWorkflow()" class="text-sm text-red-700 hover:text-red-900 font-medium">Reset</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Actions Section -->
    <div class="bg-white shadow rounded-lg mb-6">
        <div class="px-4 py-5 sm:p-6">
            <div class="flex flex-wrap gap-3">
                <button onclick="showTranslationModal()" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129"/>
                    </svg>
                    Add Translation
                </button>
                <a href="/poems/{{ poem.id }}/compare" class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
                    </svg>
                    Compare Translations
                </a>
                <button onclick="refreshTranslations()" class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                    </svg>
                    Refresh
                </button>
            </div>
        </div>
    </div>

    <!-- Poet Context Section -->
    <div class="bg-white shadow rounded-lg mb-6">
        <div class="px-4 py-5 sm:p-6">
            <h2 class="text-xl font-medium text-gray-900 mb-4">More by {{ poem.poet_name }}</h2>

            <!-- Poet Statistics -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                <div class="bg-gray-50 rounded-lg p-4">
                    <a href="/poets/{{ poem.poet_name }}" class="flex items-center text-lg font-semibold text-blue-600 hover:text-blue-800 hover:underline">
                        <svg class="h-6 w-6 text-blue-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"/>
                        </svg>
                        <div>
                            <p class="text-sm text-gray-500">Total Poems</p>
                            <p id="poet-total-poems-number">Loading...</p>
                        </div>
                    </a>
                </div>
                <div class="bg-gray-50 rounded-lg p-4">
                    <div class="flex items-center">
                        <svg class="h-6 w-6 text-green-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129"/>
                        </svg>
                        <div>
                            <p class="text-sm text-gray-500">Translations</p>
                            <p class="text-lg font-semibold text-gray-900" id="poet-total-translations">Loading...</p>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-50 rounded-lg p-4">
                    <div class="flex items-center">
                        <svg class="h-6 w-6 text-purple-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"/>
                        </svg>
                        <div>
                            <p class="text-sm text-gray-500">Languages</p>
                            <p class="text-lg font-semibold text-gray-900" id="poet-languages">Loading...</p>
                        </div>
                    </div>
                </div>
            </div>

            
            <!-- Quick Actions -->
            <div class="border-t border-gray-200 pt-4 mt-4">
                <div class="flex flex-wrap gap-2">
                    <a href="/poets/{{ poem.poet_name }}" class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
                        </svg>
                        View Poet Page
                    </a>
                    <a href="/poems/new?poet={{ poem.poet_name }}" class="inline-flex items-center px-3 py-2 border border-transparent text-sm font-medium rounded-md text-primary-700 bg-primary-100 hover:bg-primary-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                        </svg>
                        Add Another Poem
                    </a>
                    <a href="/translations?poet={{ poem.poet_name }}" class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"/>
                        </svg>
                        All Translations
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Translations Section -->
    <div class="bg-white shadow rounded-lg">
        <div class="px-4 py-5 sm:p-6">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-xl font-medium text-gray-900">Translations</h2>
                <div class="flex items-center space-x-4">
                    <span class="text-sm text-gray-500" id="translation-count">Loading...</span>
                    <select id="language-filter" onchange="filterTranslations()" class="text-sm border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500">
                        <option value="">All Languages</option>
                    </select>
                    <select id="type-filter" onchange="filterTranslations()" class="text-sm border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500">
                        <option value="">All Types</option>
                        <option value="AI">AI</option>
                        <option value="Human">Human</option>
                    </select>
                </div>
            </div>

            <!-- Loading State -->
            <div id="translations-loading" class="text-center py-8">
                <div class="inline-flex items-center">
                    <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-primary-600" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span class="text-gray-600">Loading translations...</span>
                </div>
            </div>

            <!-- Translations List -->
            <div id="translations-list" class="space-y-6 hidden">
                <!-- Translations will be loaded here via JavaScript -->
            </div>

            <!-- Empty State -->
            <div id="translations-empty" class="text-center py-12 hidden">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129"/>
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-900">No translations</h3>
                <p class="mt-1 text-sm text-gray-500">This poem hasn't been translated yet. Add the first translation.</p>
                <div class="mt-6">
                    <button onclick="showTranslationModal()" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                        </svg>
                        Add First Translation
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Translation Modal -->
<div id="translation-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-medium text-gray-900">Add Translation</h3>
                <button onclick="hideTranslationModal()" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
            </div>
            <form id="translation-form" onsubmit="submitTranslation(event)">
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Target Language</label>
                        <select id="target-language" required class="mt-1 block w-full border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500">
                            <option value="">Select language</option>
                            <option value="Chinese">Chinese</option>
                            <option value="Spanish">Spanish</option>
                            <option value="French">French</option>
                            <option value="German">German</option>
                            <option value="Japanese">Japanese</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Translation Type</label>
                        <div class="mt-2 space-x-4">
                            <label class="inline-flex items-center">
                                <input type="radio" name="translation-type" value="human" checked class="form-radio text-primary-600">
                                <span class="ml-2">Human</span>
                            </label>
                            <label class="inline-flex items-center">
                                <input type="radio" name="translation-type" value="ai" class="form-radio text-primary-600">
                                <span class="ml-2">AI</span>
                            </label>
                        </div>
                    </div>
                    <div id="human-fields">
                        <label class="block text-sm font-medium text-gray-700">Translator Name</label>
                        <input type="text" id="translator-name" class="mt-1 block w-full border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500" placeholder="Enter translator name">
                    </div>
                    <div id="ai-fields" class="hidden">
                        <label class="block text-sm font-medium text-gray-700">AI Model</label>
                        <input type="text" id="ai-model" class="mt-1 block w-full border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500" value="AI Translation System" readonly>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Translated Text</label>
                        <textarea id="translated-text" required rows="6" class="mt-1 block w-full border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500" placeholder="Enter translation"></textarea>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Quality Rating (1-5)</label>
                        <select id="quality-rating" class="mt-1 block w-full border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500">
                            <option value="">Not rated</option>
                            <option value="1">1 - Poor</option>
                            <option value="2">2 - Fair</option>
                            <option value="3">3 - Good</option>
                            <option value="4">4 - Very Good</option>
                            <option value="5">5 - Excellent</option>
                        </select>
                    </div>
                </div>
                <div class="mt-6 flex justify-end space-x-3">
                    <button type="button" onclick="hideTranslationModal()" class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                        Cancel
                    </button>
                    <button type="submit" class="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                        Add Translation
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
let translations = [];
let currentFilters = {
    language: '',
    type: ''
};

// Workflow state management
let workflowState = {
    taskId: null,
    pollInterval: null,
    eventSource: null,
    startTime: null,
    isRunning: false,
    completed: false,
    failed: false,
    timerInterval: null  // New property for self-running timer
};

// Timer functions for self-running timer
function startTimer() {
    // Clear any existing timer
    stopTimer();

    // Update timer immediately
    updateTimer();

    // Then update every second
    workflowState.timerInterval = setInterval(updateTimer, 1000);
}

function stopTimer() {
    if (workflowState.timerInterval) {
        clearInterval(workflowState.timerInterval);
        workflowState.timerInterval = null;
    }
}

function updateTimer() {
    const timingEl = document.getElementById('workflow-timing');
    if (!timingEl || !workflowState.startTime || !workflowState.isRunning) {
        return;
    }

    const elapsed = Math.floor((new Date() - workflowState.startTime) / 1000);
    const minutes = Math.floor(elapsed / 60);
    const seconds = elapsed % 60;
    timingEl.textContent = `Running for ${minutes}:${seconds.toString().padStart(2, '0')}`;
}

function startSpinner() {
    const spinner = document.getElementById('workflow-spinner');
    if (spinner) {
        spinner.classList.add('animate-spin');
    }
}

function stopSpinner() {
    const spinner = document.getElementById('workflow-spinner');
    if (spinner) {
        spinner.classList.remove('animate-spin');
    }
}

document.addEventListener('DOMContentLoaded', function() {
    // Set global variables for poem info
    window.poemTitle = '{{ poem.poem_title }}';
    window.poetName = '{{ poem.poet_name }}';

    
    loadTranslations();
    loadPoetContext();
    setupTranslationTypeToggle();
});

function setupTranslationTypeToggle() {
    const typeRadios = document.querySelectorAll('input[name="translation-type"]');
    typeRadios.forEach(radio => {
        radio.addEventListener('change', function() {
            const humanFields = document.getElementById('human-fields');
            const aiFields = document.getElementById('ai-fields');

            if (this.value === 'human') {
                humanFields.classList.remove('hidden');
                aiFields.classList.add('hidden');
            } else {
                humanFields.classList.add('hidden');
                aiFields.classList.remove('hidden');
            }
        });
    });
}

async function loadTranslations() {
    try {
        const response = await fetch(`/api/v1/translations/?poem_id={{ poem.id }}`);
        if (response.ok) {
            translations = await response.json();
            displayTranslations();
            updateLanguageFilter();
        } else {
            showError();
        }
    } catch (error) {
        console.error('Failed to load translations:', error);
        showError();
    }
}

// Load Poet Context Data
async function loadPoetContext() {
    try {
        // Load poet statistics
        const statsResponse = await fetch(`/api/v1/poets/{{ poem.poet_name }}/stats`);
        if (statsResponse.ok) {
            const stats = await statsResponse.json();
            updatePoetStatistics(stats.data);
        }

        // Load other poems by this poet
        const poemsResponse = await fetch(`/api/v1/poets/{{ poem.poet_name }}/poems?limit=5`);
        if (poemsResponse.ok) {
            const poemsData = await poemsResponse.json();
            // Other poems section removed - no need to display other poems
        }
    } catch (error) {
        console.error('Failed to load poet context:', error);
        // Removed other poems section, no need to hide loading states
    }
}

function updatePoetStatistics(stats) {
    // Update poem statistics
    const totalPoemsEl = document.getElementById('poet-total-poems-number');
    if (totalPoemsEl && stats.poem_statistics) {
        totalPoemsEl.textContent = stats.poem_statistics.total_poems || 0;
    }

    // Update translation statistics
    const totalTranslationsEl = document.getElementById('poet-total-translations');
    if (totalTranslationsEl && stats.translation_statistics) {
        totalTranslationsEl.textContent = stats.translation_statistics.total_translations || 0;
    }

    // Update languages count
    const languagesEl = document.getElementById('poet-languages');
    if (languagesEl && stats.poem_statistics) {
        const sourceLangs = stats.poem_statistics.source_languages_count || 0;
        const targetLangs = stats.translation_statistics.target_languages_count || 0;
        languagesEl.textContent = `${sourceLangs} → ${targetLangs}`;
    }
}

// Other poems display function removed - section no longer exists

function displayTranslations() {
    const loadingEl = document.getElementById('translations-loading');
    const listEl = document.getElementById('translations-list');
    const emptyEl = document.getElementById('translations-empty');
    const countEl = document.getElementById('translation-count');

    loadingEl.classList.add('hidden');

    // Apply filters
    let filteredTranslations = translations.filter(t => {
        if (currentFilters.language && t.target_language !== currentFilters.language) {
            return false;
        }
        if (currentFilters.type && t.translator_type !== currentFilters.type) {
            return false;
        }
        return true;
    });

    countEl.textContent = `${filteredTranslations.length} translation${filteredTranslations.length !== 1 ? 's' : ''}`;

    if (filteredTranslations.length === 0) {
        emptyEl.classList.remove('hidden');
        listEl.classList.add('hidden');
        return;
    }

    emptyEl.classList.add('hidden');
    listEl.classList.remove('hidden');
    listEl.innerHTML = filteredTranslations.map(translation => createTranslationCard(translation)).join('');
}

function createTranslationCard(translation) {
    const createdDate = new Date(translation.created_at).toLocaleString();
    const qualityStars = translation.quality_rating ? '★'.repeat(translation.quality_rating) + '☆'.repeat(5 - translation.quality_rating) : 'Not rated';

    return `
        <div class="bg-gray-50 rounded-lg p-6 hover:shadow-md transition-shadow duration-200">
            <div class="flex justify-between items-start mb-4">
                <div class="flex-1">
                    <div class="flex items-center space-x-3 mb-2">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${translation.translator_type === 'AI' ? 'bg-green-100 text-green-800' : 'bg-purple-100 text-purple-800'}">
                            ${translation.translator_type}
                        </span>
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                            ${translation.target_language}
                        </span>
                        <div class="text-yellow-400 text-sm" title="Quality Rating">
                            ${qualityStars}
                        </div>
                    </div>
                    <h4 class="text-lg font-medium text-gray-900 mb-1">${translation.translated_poem_title || window.poemTitle}</h4>
                    <p class="text-sm text-gray-500 mb-2">${translation.translated_poet_name || window.poetName}</p>
                    <p class="text-xs text-gray-400">${createdDate}</p>
                </div>
                <div class="flex space-x-2">
                    <button onclick="editTranslation('${translation.id}')" class="text-gray-400 hover:text-gray-600">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                        </svg>
                    </button>
                    <button onclick="deleteTranslation('${translation.id}')" class="text-red-400 hover:text-red-600">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                        </svg>
                    </button>
                </div>
            </div>
            <div class="poetry-text text-gray-700 whitespace-pre-wrap mb-4">${translation.translated_text}</div>
            <div class="flex justify-between items-center text-sm">
                <div class="flex space-x-4 text-gray-500">
                    <span>ID: ${translation.id.substring(0, 8)}...</span>
                </div>
                <button onclick="addNote('${translation.id}')" class="text-primary-600 hover:text-primary-500 font-medium">
                    Add Note
                </button>
            </div>
        </div>
    `;
}

function updateLanguageFilter() {
    const languages = [...new Set(translations.map(t => t.target_language))];
    const selectEl = document.getElementById('language-filter');
    selectEl.innerHTML = '<option value="">All Languages</option>' +
        languages.map(lang => `<option value="${lang}">${lang}</option>`).join('');
}

function filterTranslations() {
    currentFilters.language = document.getElementById('language-filter').value;
    currentFilters.type = document.getElementById('type-filter').value;
    displayTranslations();
}

function showTranslationModal() {
    document.getElementById('translation-modal').classList.remove('hidden');
    document.getElementById('translation-form').reset();
}

function hideTranslationModal() {
    document.getElementById('translation-modal').classList.add('hidden');
}

async function submitTranslation(event) {
    event.preventDefault();

    const formData = {
        poem_id: '{{ poem.id }}',
        target_language: document.getElementById('target-language').value,
        translator_name: document.getElementById('translator-name').value || 'Anonymous',
        translated_text: document.getElementById('translated-text').value,
        quality_rating: document.getElementById('quality-rating').value ? parseInt(document.getElementById('quality-rating').value) : null
    };

    try {
        const response = await fetch('/api/v1/translations/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData)
        });

        if (response.ok) {
            hideTranslationModal();
            loadTranslations();
            showSuccessMessage('Translation added successfully!');
        } else {
            const error = await response.json();
            showErrorMessage('Failed to add translation: ' + error.detail);
        }
    } catch (error) {
        console.error('Failed to submit translation:', error);
        showErrorMessage('Failed to add translation. Please try again.');
    }
}

async function deleteTranslation(translationId) {
    if (!confirm('Are you sure you want to delete this translation?')) {
        return;
    }

    try {
        const response = await fetch(`/api/v1/translations/${translationId}`, {
            method: 'DELETE'
        });

        if (response.ok) {
            loadTranslations();
            showSuccessMessage('Translation deleted successfully!');
        } else {
            showErrorMessage('Failed to delete translation.');
        }
    } catch (error) {
        console.error('Failed to delete translation:', error);
        showErrorMessage('Failed to delete translation. Please try again.');
    }
}

async function deletePoem() {
    if (!confirm('Are you sure you want to delete this poem and all its translations? This action cannot be undone.')) {
        return;
    }

    try {
        const response = await fetch(`/api/v1/poems/{{ poem.id }}`, {
            method: 'DELETE'
        });

        if (response.ok) {
            window.location.href = '/poems';
        } else {
            showErrorMessage('Failed to delete poem.');
        }
    } catch (error) {
        console.error('Failed to delete poem:', error);
        showErrorMessage('Failed to delete poem. Please try again.');
    }
}

function refreshTranslations() {
    loadTranslations();
}

function showSuccessMessage(message) {
    // Success messages disabled to avoid distractions during translation
    // console.log('Success:', message); // Uncomment for debugging if needed
}

function showError(message) {
    // Error messages disabled to avoid distractions during translation
    // console.error('Error:', message); // Uncomment for debugging if needed
}

function showErrorMessage(message) {
    // Error messages disabled to avoid distractions during translation
    // console.error('Error:', message); // Uncomment for debugging if needed
}

function editTranslation(translationId) {
    // TODO: Implement edit translation functionality
    // alert('Edit translation functionality coming soon!'); // Disabled to avoid distractions
}

function addNote(translationId) {
    // TODO: Implement add note functionality
    // alert('Add note functionality coming soon!'); // Disabled to avoid distractions
}

// ==================== WORKFLOW MANAGEMENT FUNCTIONS ====================

async function startWorkflow() {
    const targetLanguage = document.getElementById('workflow-target-language').value;
    const workflowMode = document.getElementById('workflow-mode').value;

    if (!targetLanguage) {
        showErrorMessage('Please select a target language for the translation.');
        return;
    }

    // Prevent duplicate workflow launches
    if (workflowState.isRunning) {
        showErrorMessage('A translation workflow is already running.');
        return;
    }

    try {
        // Disable the start button
        const startBtn = document.getElementById('start-workflow-btn');
        const btnText = document.getElementById('workflow-btn-text');
        startBtn.disabled = true;
        btnText.textContent = 'Starting...';

        // Map language names to codes
        const languageMap = {
            'Chinese': 'zh-CN',
            'English': 'en',
            'Japanese': 'ja',
            'Korean': 'ko'
        };

        // Prepare workflow request data
        const requestData = {
            poem_id: '{{ poem.id }}',
            source_lang: '{{ poem.source_language }}',
            target_lang: languageMap[targetLanguage] || targetLanguage,
            workflow_mode: workflowMode,
            poet_name: '{{ poem.poet_name }}'
        };

        console.log('Starting workflow with data:', requestData);

        // Start the workflow
        const response = await fetch('/api/v1/workflow/translate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestData)
        });

        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.detail || 'Failed to start workflow');
        }

        const result = await response.json();

        // Initialize workflow state
        workflowState.taskId = result.data.task_id;
        workflowState.startTime = new Date();
        workflowState.isRunning = true;
        workflowState.completed = false;
        workflowState.failed = false;

        console.log('Workflow started with task ID:', result.data.task_id);

        // Start the self-running timer
        startTimer();

        // Start spinner animation
        startSpinner();

        // Show progress section
        document.getElementById('workflow-progress').classList.remove('hidden');
        document.getElementById('workflow-error').classList.add('hidden');

        // Start polling for updates
        startWorkflowPolling();

        // Update button text
        btnText.textContent = 'Running...';

        showSuccessMessage('Translation workflow started successfully!');

    } catch (error) {
        console.error('Failed to start workflow:', error);

        // Reset button state
        const startBtn = document.getElementById('start-workflow-btn');
        const btnText = document.getElementById('workflow-btn-text');
        startBtn.disabled = false;
        btnText.textContent = 'Start Translation';

        showErrorMessage('Failed to start translation workflow: ' + error.message);

        // Reset workflow state
        resetWorkflowState();
    }
}

function startWorkflowPolling() {
    if (workflowState.eventSource) {
        workflowState.eventSource.close();
    }

    // Use Server-Sent Events (SSE) for real-time updates
    const sseUrl = `/api/v1/workflow/tasks/${workflowState.taskId}/stream`;
    console.log('🔗 Connecting to SSE endpoint:', sseUrl);

    workflowState.eventSource = new EventSource(sseUrl);

    // Track connection state
    workflowState.sseConnected = false;
    workflowState.sseReconnectAttempts = 0;
    const maxReconnectAttempts = 3;

    workflowState.eventSource.onopen = function(event) {
        console.log('✅ SSE connection opened');
        workflowState.sseConnected = true;
        workflowState.sseReconnectAttempts = 0;
    };

    workflowState.eventSource.addEventListener('status', function(event) {
        try {
            const task = JSON.parse(event.data);
            console.log('📡 [Frontend] Received SSE status update:', task);
            updateWorkflowUI(task);

            // Check if workflow is completed
            if (task.status === 'completed') {
                handleWorkflowCompletion(task);
            } else if (task.status === 'failed') {
                handleWorkflowFailure(task.error_message || 'Workflow failed');
            }
        } catch (error) {
            console.error('Error parsing SSE data:', error);
        }
    });

    // Handle step change events specifically
    workflowState.eventSource.addEventListener('step_change', function(event) {
        try {
            const task = JSON.parse(event.data);
            console.log('🔄 [Frontend] Received SSE step change update:', task);
            updateWorkflowUI(task, true); // true = highlight step change

            // Check if workflow is completed
            if (task.status === 'completed') {
                handleWorkflowCompletion(task);
            } else if (task.status === 'failed') {
                handleWorkflowFailure(task.error_message || 'Workflow failed');
            }
        } catch (error) {
            console.error('Error parsing step change data:', error);
        }
    });

    workflowState.eventSource.addEventListener('completed', function(event) {
        try {
            const task = JSON.parse(event.data);
            console.log('🎉 [Frontend] Received completion event:', task);
            handleWorkflowCompletion(task);

            // Mark SSE as complete to prevent reconnection attempts
            workflowState.sseCompleted = true;
            workflowState.sseConnected = false;

            // Close SSE connection gracefully
            if (workflowState.eventSource) {
                workflowState.eventSource.close();
                workflowState.eventSource = null;
                console.log('✅ SSE connection closed after completion');
            }
        } catch (error) {
            console.error('Error parsing completed event:', error);
        }
    });

    workflowState.eventSource.addEventListener('failed', function(event) {
        try {
            const task = JSON.parse(event.data);
            console.log('❌ [Frontend] Received failed event:', task);
            handleWorkflowFailure(task.error_message || 'Workflow failed');

            // Mark SSE as complete to prevent reconnection attempts
            workflowState.sseCompleted = true;
            workflowState.sseConnected = false;

            // Close SSE connection gracefully
            if (workflowState.eventSource) {
                workflowState.eventSource.close();
                workflowState.eventSource = null;
                console.log('✅ SSE connection closed after failure');
            }
        } catch (error) {
            console.error('Error parsing failed event:', error);
        }
    });

    // Handle heartbeat events to keep connection monitoring
    workflowState.eventSource.addEventListener('heartbeat', function(event) {
        try {
            const data = JSON.parse(event.data);
            console.log('💓 [Frontend] Received heartbeat:', data.timestamp);
        } catch (error) {
            console.error('Error parsing heartbeat event:', error);
        }
    });

    workflowState.eventSource.addEventListener('error', function(event) {
        console.error('❌ SSE error:', event);
        workflowState.sseConnected = false;

        // Don't try to reconnect if the workflow is already completed
        if (workflowState.sseCompleted) {
            console.log('🔌 SSE error after completion, ignoring (workflow already finished)');
            return;
        }

        // Close the current SSE connection
        if (workflowState.eventSource) {
            workflowState.eventSource.close();
            workflowState.eventSource = null;
        }

        // Try to reconnect if we haven't exceeded max attempts
        if (workflowState.sseReconnectAttempts < maxReconnectAttempts) {
            workflowState.sseReconnectAttempts++;
            console.log(`🔄 Attempting SSE reconnection ${workflowState.sseReconnectAttempts}/${maxReconnectAttempts}...`);

            setTimeout(() => {
                if (workflowState.isRunning && !workflowState.sseCompleted) {
                    startSSEStreaming();
                }
            }, 2000 * workflowState.sseReconnectAttempts); // Exponential backoff
        } else {
            console.log('⚠️ Max SSE reconnection attempts reached, falling back to HTTP polling');
            startFallbackPolling();
        }
    });

    workflowState.eventSource.addEventListener('timeout', function(event) {
        try {
            const data = JSON.parse(event.data);
            console.log('⏰ [Frontend] Received timeout event:', data);
            showErrorMessage(data.message);
            handleWorkflowFailure('Timeout: Workflow exceeded 10 minute time limit');
        } catch (error) {
            console.error('Error parsing timeout event:', error);
        }
    });

    // Handle unexpected connection closure
    workflowState.eventSource.onerror = function(event) {
        console.error('🔌 SSE connection error:', event);
        workflowState.sseConnected = false;

        // The error event listener above will handle reconnection logic
    };

    console.log('🚀 Started SSE streaming for task:', workflowState.taskId);
}

function startFallbackPolling() {
    console.log('⚠️ Falling back to HTTP polling');

    // Clear any existing polling interval
    if (workflowState.pollInterval) {
        clearInterval(workflowState.pollInterval);
    }

    // Track polling state
    workflowState.isPolling = true;
    workflowState.pollingErrors = 0;
    const maxPollingErrors = 5;

    // Fallback poll every 1.5 seconds for active tasks (faster than SSE for better responsiveness)
    workflowState.pollInterval = setInterval(async () => {
        if (!workflowState.isRunning || !workflowState.isPolling) {
            return;
        }

        try {
            await updateWorkflowStatus();
            // Reset error counter on successful poll
            workflowState.pollingErrors = 0;
        } catch (error) {
            workflowState.pollingErrors++;
            console.error(`Error polling workflow status (${workflowState.pollingErrors}/${maxPollingErrors}):`, error);

            // If we get too many polling errors, stop polling
            if (workflowState.pollingErrors >= maxPollingErrors) {
                console.error('Max polling errors reached, stopping polling');
                stopWorkflowPolling();
                showErrorMessage('Unable to fetch workflow status updates. The workflow may still be running - please refresh the page to check.');
            }
        }
    }, 1500);

    // Set timeout to stop polling after 10 minutes
    workflowState.pollingTimeout = setTimeout(() => {
        if (workflowState.isRunning) {
            stopWorkflowPolling();
            showErrorMessage('Translation workflow timed out after 10 minutes.');
            handleWorkflowFailure('Timeout: Workflow exceeded 10 minute time limit');
        }
    }, 10 * 60 * 1000);

    console.log('🔄 Started HTTP fallback polling');
}

function stopWorkflowPolling() {
    workflowState.isPolling = false;

    if (workflowState.pollInterval) {
        clearInterval(workflowState.pollInterval);
        workflowState.pollInterval = null;
    }

    if (workflowState.pollingTimeout) {
        clearTimeout(workflowState.pollingTimeout);
        workflowState.pollingTimeout = null;
    }

    console.log('⏹️ Stopped workflow polling');
}

async function updateWorkflowStatus() {
    if (!workflowState.taskId || !workflowState.isRunning) {
        return;
    }

    try {
        const response = await fetch(`/api/v1/workflow/tasks/${workflowState.taskId}`);

        if (!response.ok) {
            throw new Error('Failed to get workflow status');
        }

        const result = await response.json();
        const task = result.data;
        updateWorkflowUI(task);

        // Check if workflow is completed
        if (task.status === 'completed') {
            handleWorkflowCompletion(task);
        } else if (task.status === 'failed') {
            handleWorkflowFailure(task.error_message || 'Workflow failed');
        }

    } catch (error) {
        console.error('Failed to update workflow status:', error);
        // Don't fail the workflow, just log the error
    }
}

function updateWorkflowUI(task, isStepChange = false) {
    console.log('🎨 [Frontend] Updating UI with task data:', task, isStepChange ? '(STEP CHANGE)' : '');

    // Update progress bar
    const progressBar = document.getElementById('workflow-progress-bar');
    const percentageText = document.getElementById('workflow-percentage');

    if (progressBar && task.progress !== undefined) {
        progressBar.style.width = `${task.progress}%`;
        console.log('📊 [Frontend] Progress bar updated:', `${task.progress}%`);
    }

    if (percentageText && task.progress !== undefined) {
        percentageText.textContent = `${task.progress}%`;
        console.log('📈 [Frontend] Progress text updated:', `${task.progress}%`);
    }

    // Update enhanced status messages
    const currentStepEl = document.getElementById('workflow-current-step');
    const stepDetailsEl = document.getElementById('workflow-step-details');
    const timing = document.getElementById('workflow-timing');

    if (task.status === 'running') {
        const elapsed = Math.floor((new Date() - workflowState.startTime) / 1000);
        const minutes = Math.floor(elapsed / 60);
        const seconds = elapsed % 60;

        // Update current step and details with enhanced step information
        let stepInfo = '';
        let stepDetailsInfo = '';

        if (task.current_step && task.step_details) {
            const stepName = task.current_step;
            const stepStatus = task.step_details.step_status || 'unknown';
            const provider = task.step_details.provider || 'AI';
            const mode = task.step_details.mode || 'standard';

            // Enhanced step display with status
            stepInfo = `${stepName} (${stepStatus})`;

            // Enhanced step details
            stepDetailsInfo = `${provider} • ${mode}`;

            if (task.step_details.message) {
                // Filter out redundant "Starting..." messages
                const message = task.step_details.message;
                if (!message.toLowerCase().startsWith('starting')) {
                    stepDetailsInfo += ` • ${message}`;
                }
            }

            console.log(`🔄 [Frontend] Step: ${stepInfo} - ${stepDetailsInfo}`);

            // Add visual feedback for step changes
            if (isStepChange && currentStepEl) {
                currentStepEl.classList.add('animate-pulse', 'text-blue-600');
                setTimeout(() => {
                    currentStepEl.classList.remove('animate-pulse', 'text-blue-600');
                }, 2000);
            }
        } else {
            // Fallback to percentage-based step detection
            stepInfo = getStepStatusMessage(percentage);
            stepDetailsInfo = getStepStatusMessage(percentage);
        }

        if (currentStepEl) {
            currentStepEl.textContent = stepInfo;
        }

        if (stepDetailsEl) {
            stepDetailsEl.textContent = stepDetailsInfo;
        }

        if (timing) {
            timing.textContent = `Running for ${minutes}:${seconds.toString().padStart(2, '0')}`;
        }

        // Show step progress details if available
        if (task.step_progress) {
            updateStepProgressDetails(task.step_progress);
        }

        // Update step states if available
        if (task.step_states) {
            updateStepStates(task.step_states);
        } else {
            // Fallback: Update step indicators based on current step only
            updateStepIndicators(task.current_step);
        }
    }
}

function getStepStatusMessage(percentage) {
    if (percentage < 33) {
        return 'Step 1: Creating initial translation...';
    } else if (percentage < 66) {
        return 'Step 2: Reviewing and suggesting improvements...';
    } else if (percentage < 100) {
        return 'Step 3: Refining final translation...';
    } else {
        return 'Finalizing translation...';
    }
}

function formatStepDetails(stepDetails) {
    if (!stepDetails || typeof stepDetails !== 'object') {
        return 'Processing...';
    }

    // Format step details based on available information
    if (stepDetails.provider && stepDetails.mode) {
        return `Provider: ${stepDetails.provider} | Mode: ${stepDetails.mode}`;
    } else if (stepDetails.total_tokens) {
        return `Tokens used: ${stepDetails.total_tokens} | Duration: ${stepDetails.duration_seconds}s`;
    } else if (stepDetails.workflow_id) {
        return `Workflow ID: ${stepDetails.workflow_id}`;
    } else {
        // Generic object to string conversion
        return Object.entries(stepDetails)
            .map(([key, value]) => `${key}: ${value}`)
            .join(' | ');
    }
}

function updateStepProgressDetails(stepProgress) {
    const stepProgressEl = document.getElementById('step-progress-details');
    const stepProgressList = document.getElementById('step-progress-list');

    if (!stepProgress || typeof stepProgress !== 'object') {
        stepProgressEl.classList.add('hidden');
        return;
    }

    stepProgressEl.classList.remove('hidden');

    // Convert step progress object to list items
    const stepItems = Object.entries(stepProgress).map(([stepName, percentage]) => {
        const isActive = percentage > 0 && percentage < 100;
        const isCompleted = percentage >= 100;

        let statusIcon = '⏸️';
        let statusColor = 'text-gray-500';

        if (isCompleted) {
            statusIcon = '✅';
            statusColor = 'text-green-600';
        } else if (isActive) {
            statusIcon = '🔄';
            statusColor = 'text-blue-600 animate-pulse';
        }

        return `
            <div class="flex items-center justify-between text-xs">
                <span class="font-medium">${statusIcon} ${stepName}</span>
                <span class="${statusColor}">${percentage}%</span>
            </div>
            <div class="w-full bg-gray-200 rounded-full h-1">
                <div class="bg-blue-500 h-1 rounded-full transition-all duration-300 ease-out" style="width: ${percentage}%"></div>
            </div>
        `;
    }).join('');

    stepProgressList.innerHTML = stepItems;
}

function updateStepIndicators(currentStepName) {
    const steps = [
        { id: 'initial-translation', name: 'Initial Translation' },
        { id: 'editor-review', name: 'Editor Review' },
        { id: 'translator-revision', name: 'Translator Revision' }
    ];

    steps.forEach((step, index) => {
        const indicator = document.getElementById(`${step.id}-indicator`);
        const status = document.getElementById(`${step.id}-status`);

        if (!indicator || !status) {
            return;
        }

        if (currentStepName === step.name) {
            // Current step - in progress
            indicator.querySelector('div').className = 'w-10 h-10 mx-auto mb-2 rounded-full bg-blue-500 flex items-center justify-center animate-pulse';
            indicator.querySelector('span').className = 'text-sm font-medium text-white';
            indicator.querySelector('span').textContent = index + 1;
            status.textContent = 'In Progress';
        } else if (
            (index === 0 && currentStepName === 'Editor Review') ||
            (index === 1 && currentStepName === 'Translator Revision') ||
            (index === 2 && currentStepName === 'Translation Complete')
        ) {
            // Previous step - completed
            indicator.querySelector('div').className = 'w-10 h-10 mx-auto mb-2 rounded-full bg-green-500 flex items-center justify-center';
            indicator.querySelector('span').className = 'text-sm font-medium text-white';
            indicator.querySelector('span').textContent = '✓';
            status.textContent = 'Completed';
        } else {
            // Future step - waiting
            indicator.querySelector('div').className = 'w-10 h-10 mx-auto mb-2 rounded-full bg-gray-200 flex items-center justify-center';
            indicator.querySelector('span').className = 'text-sm font-medium text-gray-600';
            indicator.querySelector('span').textContent = index + 1;
            status.textContent = 'Waiting';
        }
    });
}

function updateAllStepsToCompleted() {
    // Mark all steps as completed when workflow is finished
    const steps = [
        { id: 'initial-translation', name: 'Initial Translation' },
        { id: 'editor-review', name: 'Editor Review' },
        { id: 'translator-revision', name: 'Translator Revision' }
    ];

    steps.forEach((step, index) => {
        const indicator = document.getElementById(`${step.id}-indicator`);
        const status = document.getElementById(`${step.id}-status`);

        if (!indicator || !status) {
            return;
        }

        // Mark all steps as completed
        indicator.querySelector('div').className = 'w-10 h-10 mx-auto mb-2 rounded-full bg-green-500 flex items-center justify-center';
        indicator.querySelector('span').className = 'text-sm font-medium text-white';
        indicator.querySelector('span').textContent = '✓';
        status.textContent = 'Completed';
    });

    console.log('✅ [Frontend] All steps marked as completed');
}

function updateStepStates(stepStates) {
    // Update step states if available from backend
    if (!stepStates || typeof stepStates !== 'object') {
        return;
    }

    console.log('🔄 [Frontend] Updating step states:', stepStates);

    // Update each step indicator based on its state
    Object.entries(stepStates).forEach(([stepName, state]) => {
        const stepId = stepName.toLowerCase().replace(/\s+/g, '-');
        const indicator = document.getElementById(`${stepId}-indicator`);
        const statusEl = document.getElementById(`${stepId}-status`);

        if (!indicator || !statusEl) {
            return;
        }

        const indicatorDiv = indicator.querySelector('div');
        const indicatorSpan = indicator.querySelector('span');

        if (state === 'completed') {
            indicatorDiv.className = 'w-10 h-10 mx-auto mb-2 rounded-full bg-green-500 flex items-center justify-center';
            indicatorSpan.className = 'text-sm font-medium text-white';
            indicatorSpan.textContent = '✓';
            statusEl.textContent = 'Completed';
            statusEl.className = 'text-xs text-green-600 font-medium';
        } else if (state === 'running') {
            indicatorDiv.className = 'w-10 h-10 mx-auto mb-2 rounded-full bg-blue-500 flex items-center justify-center animate-pulse';
            indicatorSpan.className = 'text-sm font-medium text-white';
            indicatorSpan.textContent = '⚡';
            statusEl.textContent = 'In Progress';
            statusEl.className = 'text-xs text-blue-600 font-medium';
        } else {
            indicatorDiv.className = 'w-10 h-10 mx-auto mb-2 rounded-full bg-gray-200 flex items-center justify-center';
            indicatorSpan.className = 'text-sm font-medium text-gray-600';
            indicatorSpan.textContent = stepName.charAt(0).toUpperCase();
            statusEl.textContent = 'Waiting';
            statusEl.className = 'text-xs text-gray-500 font-medium';
        }
    });
}

function handleWorkflowCompletion(task) {
    console.log('Workflow completed:', task);

    // Stop polling
    if (workflowState.pollInterval) {
        clearInterval(workflowState.pollInterval);
        workflowState.pollInterval = null;
    }

    // Stop timer
    stopTimer();

    // Stop spinner animation
    stopSpinner();

    // Update state
    workflowState.isRunning = false;
    workflowState.completed = true;

    // Update UI with null checks
    const statusMessage = document.getElementById('workflow-status-message');
    const timing = document.getElementById('workflow-timing');
    const progressBar = document.getElementById('workflow-progress-bar');
    const percentageText = document.getElementById('workflow-percentage');

    if (statusMessage) {
        statusMessage.textContent = 'Translation completed successfully!';
    }

    if (timing) {
        const elapsed = Math.floor((new Date() - workflowState.startTime) / 1000);
        const minutes = Math.floor(elapsed / 60);
        const seconds = elapsed % 60;
        timing.textContent = `Completed in ${minutes}:${seconds.toString().padStart(2, '0')}`;
    }

    // Update progress display
    if (progressBar) {
        progressBar.style.width = '100%';
    }
    if (percentageText) {
        percentageText.textContent = '100%';
    }

    // Update all steps to completed
    updateAllStepsToCompleted();

    // Show completion message
    showSuccessMessage('Translation completed successfully!');

    // Always refresh translations after completion
    setTimeout(() => {
        console.log('🔄 [Frontend] Refreshing translations after workflow completion');
        loadTranslations();
        resetWorkflowUI();

        // Show a success message that translation was added
        showSuccessMessage('Translation completed and added to the list!');
    }, 1000); // Reduced delay to 1 second for better UX
}

function handleWorkflowFailure(errorMessage) {
    console.error('Workflow failed:', errorMessage);

    // Stop polling
    if (workflowState.pollInterval) {
        clearInterval(workflowState.pollInterval);
        workflowState.pollInterval = null;
    }

    // Stop timer
    stopTimer();

    // Stop spinner animation
    stopSpinner();

    // Update state
    workflowState.isRunning = false;
    workflowState.failed = true;

    // Show error message
    const errorDiv = document.getElementById('workflow-error');
    const errorMessageEl = document.getElementById('workflow-error-message');

    errorMessageEl.textContent = errorMessage || 'Translation workflow failed';
    errorDiv.classList.remove('hidden');

    // Update button
    const startBtn = document.getElementById('start-workflow-btn');
    const btnText = document.getElementById('workflow-btn-text');
    startBtn.disabled = false;
    btnText.textContent = 'Start Translation';

    showErrorMessage('Translation workflow failed: ' + errorMessage);
}

async function cancelWorkflow() {
    if (!workflowState.taskId || !workflowState.isRunning) {
        return;
    }

    if (!confirm('Are you sure you want to cancel the translation workflow?')) {
        return;
    }

    try {
        const response = await fetch(`/api/v1/workflow/tasks/${workflowState.taskId}/cancel`, {
            method: 'POST'
        });

        if (response.ok) {
            showSuccessMessage('Workflow cancelled successfully');
            // Stop timer immediately on cancel
            stopTimer();
            // Stop spinner animation immediately on cancel
            stopSpinner();
            resetWorkflowUI();
            resetWorkflowState();
        } else {
            showErrorMessage('Failed to cancel workflow');
        }
    } catch (error) {
        console.error('Failed to cancel workflow:', error);
        showErrorMessage('Failed to cancel workflow');
    }
}

async function retryWorkflow() {
    if (!workflowState.taskId) {
        return;
    }

    try {
        const response = await fetch(`/api/v1/workflow/tasks/${workflowState.taskId}/retry`, {
            method: 'POST'
        });

        if (response.ok) {
            const result = await response.json();

            // Reset workflow state with new task ID
            workflowState.taskId = result.id;
            workflowState.startTime = new Date();
            workflowState.isRunning = true;
            workflowState.completed = false;
            workflowState.failed = false;

            // Hide error and restart polling
            document.getElementById('workflow-error').classList.add('hidden');
            startWorkflowPolling();

            // Restart the timer
            startTimer();

            // Restart spinner animation
            startSpinner();

            showSuccessMessage('Workflow restarted successfully');
        } else {
            showErrorMessage('Failed to retry workflow');
        }
    } catch (error) {
        console.error('Failed to retry workflow:', error);
        showErrorMessage('Failed to retry workflow');
    }
}

function resetWorkflow() {
    resetWorkflowUI();
    resetWorkflowState();
}

function resetWorkflowUI() {
    // Keep progress section visible after completion (no longer hiding it)
    // Only hide error section if it exists
    const errorSection = document.getElementById('workflow-error');

    if (errorSection) {
        errorSection.classList.add('hidden');
    }

    // Reset button with null checks
    const startBtn = document.getElementById('start-workflow-btn');
    const btnText = document.getElementById('workflow-btn-text');

    if (startBtn) {
        startBtn.disabled = false;
    }
    if (btnText) {
        btnText.textContent = 'Start Translation';
    }

    // Reset form with null checks
    const targetLangSelect = document.getElementById('workflow-target-language');
    const modeSelect = document.getElementById('workflow-mode');

    if (targetLangSelect) {
        targetLangSelect.value = '';
    }
    if (modeSelect) {
        modeSelect.value = 'hybrid';
    }
}

function resetWorkflowState() {
    // Close SSE connection
    if (workflowState.eventSource) {
        workflowState.eventSource.close();
        workflowState.eventSource = null;
        console.log('🔌 Closed SSE connection');
    }

    // Stop polling (fallback)
    stopWorkflowPolling();

    // Stop timer
    stopTimer();

    // Stop spinner animation
    stopSpinner();

    // Reset state
    workflowState.taskId = null;
    workflowState.startTime = null;
    workflowState.isRunning = false;
    workflowState.completed = false;
    workflowState.failed = false;
    workflowState.sseConnected = false;
    workflowState.sseReconnectAttempts = 0;
    workflowState.sseCompleted = false;
    workflowState.isPolling = false;
    workflowState.pollingErrors = 0;
}

// Clean up connections when page is unloaded
window.addEventListener('beforeunload', () => {
    console.log('🧹 Cleaning up connections before page unload');

    // Close SSE connection
    if (workflowState.eventSource) {
        workflowState.eventSource.close();
        console.log('🔌 Closed SSE connection on page unload');
    }

    // Stop polling
    stopWorkflowPolling();
});

// Also clean up on page visibility changes (user switching tabs)
document.addEventListener('visibilitychange', () => {
    if (document.hidden && workflowState.isRunning) {
        console.log('👁️ Page hidden, keeping connections active but reducing polling frequency');
        // Optionally reduce polling frequency when tab is not visible
    }
});

</script>
{% endblock %}
</code>



I want your help to design the strategy and blueprint to create a "Translation Notes" page that can display the T-E-T process results of each vpsweb translation in an elegant way. 
1. in this page, we should display the original poem, the initial translation, initial translation notes, editors notes, revised translation and revised translation notes
2. I'd like the user to have the opportunity to view the evolvement of a poem translation
3. The source of content is included in the .json file. I have also included a .html file to show the current style of the WebUI